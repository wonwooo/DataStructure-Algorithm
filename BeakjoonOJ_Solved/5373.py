import copy

t = int(input())
cases = []
for _ in range(t):
    nums = int(input())
    cases.append(list(input().split()))

def rotate(a, dir):
    n = len(a)
    b = copy.deepcopy(a)
    for i in range(n//2):
        b[i] , b[n-i-1] = b[n-i-1], b[i]
    if dir == '+':
        b = [[b[i][j] for i in range(n)] for j in range(n)]
    elif dir == '-':
        b = [[b[i][j] for i in range(n-1, -1, -1)] for j in range(n-1, -1, -1)]
    return b
def transpose(a):
    n = len(a)
    a = [[a[i][j] for i in range(n)] for j in range(n)]
    return a
'''
rotate, transpose모두 값만 바꾸는 것이아니라 새로운 객체를 만들기 때문에 return해서 바꿔줘야한다
'''

for case in cases:
    cube = {'U': [['w'] * 3 for _ in range(3)],
            'D': [['y'] * 3 for _ in range(3)],
            'L': [['g'] * 3 for _ in range(3)],
            'R': [['b'] * 3 for _ in range(3)],
            'B': [['o'] * 3 for _ in range(3)],
            'F': [['r'] * 3 for _ in range(3)]}
    for action in case:
        side = action[0]
        dir = action[1]
        cube[side] = rotate(cube[side], dir)#해당 면을 돌리고
        if side == 'U':
            f = cube['F']
            r = cube['R']
            l = cube['L']
            b = cube['B']
            if dir == '+':
                tmp = [f[0][0], f[0][1], f[0][2]]
                f[0][0], f[0][1], f[0][2] = r[0][0], r[0][1], r[0][2]
                r[0][0], r[0][1], r[0][2] = b[0][0], b[0][1], b[0][2]
                b[0][0], b[0][1], b[0][2] = l[0][0], l[0][1], l[0][2]
                l[0][0], l[0][1], l[0][2] = tmp
            if dir == '-':
                tmp = [f[0][0], f[0][1], f[0][2]]
                f[0][0], f[0][1], f[0][2] = l[0][0], l[0][1], l[0][2]
                l[0][0], l[0][1], l[0][2] = b[0][0], b[0][1], b[0][2]
                b[0][0], b[0][1], b[0][2] = r[0][0], r[0][1], r[0][2]
                r[0][0], r[0][1], r[0][2] = tmp
        if side == 'D':
            #모두 3행
            f = cube['F']
            r = cube['R']
            l = cube['L']
            b = cube['B']
            if dir == '+':
                tmp = f[2][:]
                f[2][0], f[2][1], f[2][2] = l[2][0], l[2][1], l[2][2]
                l[2][0], l[2][1], l[2][2] = b[2][0], b[2][1], b[2][2]
                b[2][0], b[2][1], b[2][2] = r[2][0], r[2][1], r[2][2]
                r[2][0], r[2][1], r[2][2] = tmp
            if dir == '-':
                tmp = f[2][:]
                f[2][0], f[2][1], f[2][2] = r[2][0], r[2][1], r[2][2]
                r[2][0], r[2][1], r[2][2] = b[2][0], b[2][1], b[2][2]
                b[2][0], b[2][1], b[2][2] = l[2][0], l[2][1], l[2][2]
                l[2][0], l[2][1], l[2][2] = tmp
        if side == 'F':
            # u3행 R1열 L3열 D1행
            u = cube['U']
            r = cube['R']
            l = cube['L']
            d = cube['D']
            if dir == '+':
                tmp = [u[2][0], u[2][1], u[2][2]]
                u[2][0], u[2][1], u[2][2] = l[2][2], l[1][2], l[0][2]
                l[2][2], l[1][2], l[0][2] = d[0][2], d[0][1], d[0][0]
                d[0][2], d[0][1], d[0][0] = r[0][0], r[1][0], r[2][0]
                r[0][0], r[1][0], r[2][0] = tmp
            if dir == '-':
                tmp = [u[2][0], u[2][1], u[2][2]]
                u[2][0], u[2][1], u[2][2] = r[0][0], r[1][0], r[2][0]
                r[0][0], r[1][0], r[2][0] = d[0][2], d[0][1], d[0][0]
                d[0][2], d[0][1], d[0][0] = l[2][2], l[1][2], l[0][2]
                l[2][2], l[1][2], l[0][2] = tmp

        if side == 'B':
            # u1행 R3열 L1열 D3행
            u = cube['U']
            r = cube['R']
            l = cube['L']
            d = cube['D']
            if dir == '+':
                tmp = [u[0][0], u[0][1], u[0][2]] #반드시 새로운 객체로 할당해야한다. tmp = u[0]로 하면 주고만 공유해서 tmp효과없음
                u[0][0], u[0][1], u[0][2] = r[0][2], r[1][2], r[2][2]
                r[0][2], r[1][2], r[2][2] = d[2][2], d[2][1], d[2][0]
                d[2][2], d[2][1], d[2][0] = l[2][0], l[1][0], l[0][0]
                l[2][0], l[1][0], l[0][0] = tmp
            if dir == '-':
                tmp = [u[0][0], u[0][1], u[0][2]]
                u[0][0], u[0][1], u[0][2] = l[2][0], l[1][0], l[0][0]
                l[2][0], l[1][0], l[0][0] = d[2][2], d[2][1], d[2][0]
                d[2][2], d[2][1], d[2][0] = r[0][2], r[1][2], r[2][2]
                r[0][2], r[1][2], r[2][2] = tmp

        if side == 'L':
            #u1열 b3열 d 1열 f1열
            u = cube['U']
            b = cube['B']
            f = cube['F']
            d = cube['D']
            if dir == '+':
                tmp = [u[0][0], u[1][0], u[2][0]]

                u[0][0], u[1][0], u[2][0] = b[2][2], b[1][2], b[0][2]
                b[2][2], b[1][2], b[0][2] = d[0][0], d[1][0], d[2][0]
                d[0][0], d[1][0], d[2][0] = f[0][0], f[1][0], f[2][0]
                f[0][0], f[1][0], f[2][0] = tmp

            if dir == '-':
                tmp = [u[0][0], u[1][0], u[2][0]]
                u[0][0], u[1][0], u[2][0] = f[0][0], f[1][0] ,f[2][0]
                f[0][0], f[1][0], f[2][0] = d[0][0], d[1][0], d[2][0]
                d[0][0], d[1][0], d[2][0] = b[2][2], b[1][2], b[0][2]
                b[2][2], b[1][2], b[0][2] = tmp

        if side == 'R':
            #u3열 b1열 d 3열 f3열
            u = cube['U']
            b = cube['B']
            f = cube['F']
            d = cube['D']
            if dir == '+':
                tmp = [u[0][2], u[1][2], u[2][2]]
                u[0][2], u[1][2], u[2][2] = f[0][2], f[1][2], f[2][2]
                f[0][2], f[1][2], f[2][2] = d[0][2], d[1][2], d[2][2]
                d[0][2], d[1][2], d[2][2] = b[2][0], b[1][0], b[0][0]
                b[2][0], b[1][0], b[0][0] = tmp

            if dir == '-':
                tmp = [u[0][2], u[1][2], u[2][2]]
                u[0][2], u[1][2], u[2][2] = b[2][0], b[1][0], b[0][0]
                b[2][0], b[1][0], b[0][0] = d[0][2], d[1][2], d[2][2]
                d[0][2], d[1][2], d[2][2] = f[0][2], f[1][2], f[2][2]
                f[0][2], f[1][2], f[2][2] = tmp


    for row in cube['U']:
        print(''.join(row))

